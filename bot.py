import logging
import random
import json
import os
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage

API_TOKEN = ''
BOT_USERNAME = 'WITHOUT @'  

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

DATA_FILE = 'data.json'

if os.path.exists(DATA_FILE):
    with open(DATA_FILE, 'r', encoding='utf-8') as f:
        data = json.load(f)
else:
    data = {}

admin_ids = {1097277508}
subscribers = set(data.get('subscribers', []))      
user_profiles = data.get('user_profiles', {})        
chat_list = data.get('chat_list', {})             
active_games = {}

SHOP_ITEMS = {
    '–ë—É—Å—Ç': 50,
    '–ö–∞–∫–æ–π—Ç–æ–¢–æ–≤–∞—Ä': 100
}
bonus_settings = {"villager": 10, "mafia": 10}
SUBSCRIPTION_PRICE = 100

def save_data():
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump({
            'user_profiles': user_profiles,
            'chat_list': chat_list,
            'subscribers': list(subscribers)
        }, f, ensure_ascii=False, indent=4)


def get_user_profile(user_id, username):
    if str(user_id) not in user_profiles:
        user_profiles[str(user_id)] = {
            "username": username,
            "balance": 0,
            "points": 0,
            "roses": 0,
            "donation": 0
        }
    else:
        user_profiles[str(user_id)]["username"] = username
    save_data()
    return user_profiles[str(user_id)]

def update_chat_list(chat: types.Chat):
    if str(chat.id) not in chat_list:
        chat_list[str(chat.id)] = {"title": chat.title or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è", "link": None, "status": "–Ω–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω", "score": 0}
        save_data()


class Role:
    def __init__(self, name, description, abilities):
        self.name = name
        self.description = description
        self.abilities = abilities

STANDARD_ROLES = {
    '–ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å': Role('–ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å', '–ù–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π', {}),
    '–ú–∞—Ñ–∏—è': Role('–ú–∞—Ñ–∏—è', '–£–±–∏–π—Å—Ç–≤–æ –Ω–æ—á—å—é', {'kill': True}),
    '–î–æ–Ω –º–∞—Ñ–∏–∏': Role('–î–æ–Ω –º–∞—Ñ–∏–∏', '–£–ø—Ä–∞–≤–ª—è–µ—Ç –º–∞—Ñ–∏–µ–π, —É–±–∏–π—Å—Ç–≤–æ –Ω–æ—á—å—é', {'kill': True, 'lead': True}),
    '–î–æ–∫—Ç–æ—Ä': Role('–î–æ–∫—Ç–æ—Ä', '–°–ø–∞—Å–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –Ω–æ—á—å—é', {'save': True}),
    '–ö–æ–º–∏—Å—Å–∞—Ä': Role('–ö–æ–º–∏—Å—Å–∞—Ä', '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –∏–≥—Ä–æ–∫–∞ –Ω–æ—á—å—é', {'check': True})
}

ABILITY_DESCRIPTIONS = {
    'kill': '–£–±–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –Ω–æ—á—å—é',
    'save': '–°–ø–∞—Å—Ç–∏ –∏–≥—Ä–æ–∫–∞ –Ω–æ—á—å—é',
    'check': '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–æ–ª—å –∏–≥—Ä–æ–∫–∞ –Ω–æ—á—å—é',
    'block': '–ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –∏–≥—Ä–æ–∫–∞',
    'boost': '–£—Å–∏–ª–∏—Ç—å —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∏–≥—Ä–æ–∫–∞',
    'spy': '–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ–π—Å—Ç–≤–∏–∏ –∏–≥—Ä–æ–∫–∞',
    'lead': '–£–ø—Ä–∞–≤–ª—è—Ç—å –º–∞—Ñ–∏–µ–π'
}

user_game_map = {}

class Game:
    def __init__(self, chat_id):
        self.chat_id = chat_id
        self.players = {}
        self.phase = 'waiting'  
        self.votes = {}         
        self.night_actions = {}
        self.started = False

    def add_player(self, user_id, username):
        if user_id not in self.players:
            self.players[user_id] = {'username': username, 'role': None, 'alive': True, 'currency': 0}
            return True
        return False

    def assign_roles(self):
        player_ids = list(self.players.keys())
        random.shuffle(player_ids)
        n = len(player_ids)
        roles_list = []
        if n >= 5:
            roles_list = ['–ú–∞—Ñ–∏—è', '–î–æ–Ω –º–∞—Ñ–∏–∏', '–î–æ–∫—Ç–æ—Ä', '–ö–æ–º–∏—Å—Å–∞—Ä'] + ['–ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å'] * (n - 4)
        else:
            roles_list = ['–ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å'] * n
        random.shuffle(roles_list)
        for uid, role_name in zip(player_ids, roles_list):
            self.players[uid]['role'] = STANDARD_ROLES[role_name]
        self.started = True

    def tally_votes(self):
        vote_count = {}
        for voter, target in self.votes.items():
            vote_count[target] = vote_count.get(target, 0) + 1
        if vote_count:
            max_votes = max(vote_count.values())
            targets = [uid for uid, count in vote_count.items() if count == max_votes]
            if len(targets) == 1:
                return targets[0]
        return None

    def process_night(self):
        effective_actions = dict(self.night_actions)
        blocked_targets = {action['target'] for action in self.night_actions.values() if action['action'] == 'block'}
        for actor in list(effective_actions.keys()):
            if actor in blocked_targets:
                del effective_actions[actor]
        mafia_kills = [action['target'] for actor, action in effective_actions.items() if action['action'] == 'kill']
        target = max(set(mafia_kills), key=mafia_kills.count) if mafia_kills else None
        saved = None
        for action in effective_actions.values():
            if action['action'] == 'save':
                saved = action['target']
                break
        check_result = {}
        for action in effective_actions.values():
            if action['action'] == 'check':
                target_id = action['target']
                role = self.players[target_id]['role']
                check_result[target_id] = role.name
        boosted = [action['target'] for action in effective_actions.values() if action['action'] == 'boost']
        spy_info = {}
        for actor, action in effective_actions.items():
            if action['action'] == 'spy':
                target_id = action['target']
                spy_info[actor] = self.night_actions.get(target_id, {}).get('action', '–Ω–∏—á–µ–≥–æ')
        result = {
            'killed': None,
            'checked': check_result,
            'boosted': boosted,
            'spy_info': spy_info
        }
        if target is not None and target != saved:
            self.players[target]['alive'] = False
            result['killed'] = target
        self.night_actions = {}
        return result

    def check_winner(self):
        mafia_count = 0
        villagers_count = 0
        for player in self.players.values():
            if player['alive']:
                if player['role'].name in ['–ú–∞—Ñ–∏—è', '–î–æ–Ω –º–∞—Ñ–∏–∏']:
                    mafia_count += 1
                else:
                    villagers_count += 1
        if mafia_count == 0:
            return '–ú–∏—Ä–Ω—ã–µ –∂–∏—Ç–µ–ª–∏'
        elif mafia_count >= villagers_count:
            return '–ú–∞—Ñ–∏—è'
        return None


@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    args = message.get_args()

    if message.chat.type == "private":
        if args and args.startswith("join_"):
            try:
                chat_id = int(args.split("_", 1)[1])
            except:
                await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.")
                return

            if chat_id not in active_games:
                await message.answer("–ò–≥—Ä–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —á–∞—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return

            game = active_games[chat_id]
            user_id = message.from_user.id
            username = message.from_user.username or message.from_user.first_name

            if game.add_player(user_id, username):
                user_game_map[user_id] = chat_id 
                await message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ –≤ —á–∞—Ç–µ ¬´{chat_id}¬ª!")
            else:
                await message.answer("–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ.")
            return
        else:
            await message.answer(                "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *–ú–∞—Ñ–∏—è Bot* üé≤\n\n"
                "üîé –£–∑–Ω–∞–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É *`/help`*.\n"
                "ü§ù –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω—É—é –∏–∑ —á–∞—Ç–∞, –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –≤ —á–∞—Ç–µ —Å–∞–º–æ–º—É.\n\n"
                "–ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏ –∏ –≤–µ—Å—ë–ª–æ–π –∏–≥—Ä—ã! üéâ")
            return

    if message.chat.type in ["group", "supergroup"]:
        update_chat_list(message.chat)
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É ¬´–ú–∞—Ñ–∏—è¬ª! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /newgame –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã.")

@dp.message_handler(commands=['add_donation'])
async def cmd_add_donation(message: types.Message):
    user_id = message.from_user.id
    if user_id not in admin_ids:
        await message.answer("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    args = message.get_args().split()
    if len(args) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_donation <user_id –∏–ª–∏ username> <—Å—É–º–º–∞>")
        return
    target_identifier = args[0]
    try:
        amount = int(args[1])
    except ValueError:
        await message.answer("‚ùó –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    target_profile = None
    for uid, profile in user_profiles.items():
        if str(uid) == target_identifier or profile["username"] == target_identifier:
            target_profile = profile
            break

    if not target_profile:
        try:
            new_user_id = int(target_identifier)
            target_profile = get_user_profile(new_user_id, f"user{new_user_id}")
            await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
        except ValueError:
            await message.answer("‚ùó –¶–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

    target_profile["donation"] += amount
    save_data() 
    await message.answer(
        f"üí≥ –î–æ–Ω–∞—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_profile['username']} –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount}.\n"
        f"–ù–æ–≤—ã–π –¥–æ–Ω–∞—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å: {target_profile['donation']}"
    )


@dp.message_handler(commands=['newgame'])
async def cmd_newgame(message: types.Message):
    if message.chat.type == "private":
        await message.answer("–°–æ–∑–¥–∞–≤–∞—Ç—å –∏–≥—Ä—ã –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö.")
        return
    chat_id = message.chat.id
    if chat_id in active_games and not active_games[chat_id].started:
        await message.answer("–ò–≥—Ä–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /join.")
    else:
        game = Game(chat_id)
        active_games[chat_id] = game
        join_link = f"https://t.me/{BOT_USERNAME}?start=join_{str(chat_id)}"
        keyboard = InlineKeyboardMarkup()
        button = InlineKeyboardButton(text="–°—Å—ã–ª–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", url=join_link)
        keyboard.add(button)
        await message.answer("–ù–æ–≤–∞—è –∏–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞! –î–ª—è —É—á–∞—Å—Ç–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=keyboard)


@dp.message_handler(commands=['join'])
async def cmd_join(message: types.Message):
    if message.chat.type == "private":
        await message.answer("–í –ª–∏—á–Ω–æ–º —á–∞—Ç–µ –∏–≥—Ä—ã —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–µ–ª—å–∑—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.")
        return
    chat_id = message.chat.id
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    if chat_id not in active_games:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é —Å –ø–æ–º–æ—â—å—é /newgame.")
        return
    game = active_games[chat_id]
    if game.started:
        await message.answer("–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –Ω–µ–ª—å–∑—è.")
        return
    if game.add_player(user_id, username):
        await message.answer(f"{username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ!")
    else:
        await message.answer("–í—ã —É–∂–µ –≤ –∏–≥—Ä–µ.")

@dp.message_handler(commands=['startgame'])
async def cmd_startgame(message: types.Message):
    if message.chat.type == "private":
        await message.answer("–ù–∞—á–∞—Ç—å –∏–≥—Ä—É –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö.")
        return
    chat_id = message.chat.id
    if chat_id not in active_games:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –¥–ª—è –Ω–∞—á–∞–ª–∞.")
        return
    game = active_games[chat_id]
    if len(game.players) < 5:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã (–º–∏–Ω–∏–º—É–º 5).")
        return
    game.assign_roles()
    for user_id, data in game.players.items():
        role = data['role']
        message_text = f"–í–∞—à–∞ —Ä–æ–ª—å: {role.name}\n–û–ø–∏—Å–∞–Ω–∏–µ: {role.description}\n"
        if role.abilities:
            message_text += "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
            for ability in role.abilities:
                description = ABILITY_DESCRIPTIONS.get(ability, "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è")
                message_text += f"- {ability}: {description} (–∫–æ–º–∞–Ω–¥–∞: /action {ability} <username –∏–ª–∏ user_id>)\n"
        else:
            message_text += "–ù–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π."
        try:
            await bot.send_message(user_id, message_text)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–≥—Ä–æ–∫—É {user_id}: {e}")
    game.phase = 'day'
    await message.answer("–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –î–Ω–µ–≤–Ω–æ–π —Ä–∞—É–Ω–¥ ‚Äì –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é /vote.")

@dp.message_handler(commands=['vote'])
async def cmd_vote(message: types.Message):
    if message.chat.type == "private":
        user_id = message.from_user.id
        if user_id not in user_game_map:
            await message.answer("–í—ã –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –Ω–∏ –∫ –æ–¥–Ω–æ–π –∏–≥—Ä–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.")
            return

        chat_id = user_game_map[user_id]
    else:
        chat_id = message.chat.id

    if chat_id not in active_games:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã.")
        return

    game = active_games[chat_id]
    if game.phase != 'day':
        await message.answer("–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–Ω–µ–º.")
        return

    args = message.get_args().split()
    if not args:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /vote <username –∏–ª–∏ user_id>")
        return

    target_identifier = args[0]
    target_id = None
    for uid, data in game.players.items():
        if str(uid) == target_identifier or data['username'] == target_identifier:
            target_id = uid
            break

    if target_id is None:
        await message.answer("–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    game.votes[user_id] = target_id
    await message.answer(f"–í–∞—à –≥–æ–ª–æ—Å –∑–∞ –∏–≥—Ä–æ–∫–∞ {game.players[target_id]['username']} –∑–∞—Å—á–∏—Ç–∞–Ω.")


@dp.message_handler(commands=['endvote'])
async def cmd_endvote(message: types.Message):
    if message.chat.type == "private":
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ /endvote –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö.")
        return
    chat_id = message.chat.id
    if chat_id not in active_games:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã.")
        return
    game = active_games[chat_id]
    if game.phase != 'day':
        await message.answer("–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–Ω–µ–º.")
        return
    eliminated = game.tally_votes()
    if eliminated:
        game.players[eliminated]['alive'] = False
        await message.answer(f"–ò–≥—Ä–æ–∫ {game.players[eliminated]['username']} –±—ã–ª –∏–∑–≥–Ω–∞–Ω.")
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –¥–ª—è –∏–∑–≥–Ω–∞–Ω–∏—è.")
    game.votes = {}
    winner = game.check_winner()
    if winner:
        await message.answer(f"–ü–æ–±–µ–¥–∞ –∑–∞: {winner}!")
        for uid, data in game.players.items():
            if data['alive']:
                if winner == '–ú–∏—Ä–Ω—ã–µ –∂–∏—Ç–µ–ª–∏' and data['role'].name not in ['–ú–∞—Ñ–∏—è', '–î–æ–Ω –º–∞—Ñ–∏–∏']:
                    data['currency'] += bonus_settings["villager"]
                elif winner == '–ú–∞—Ñ–∏—è' and data['role'].name in ['–ú–∞—Ñ–∏—è', '–î–æ–Ω –º–∞—Ñ–∏–∏']:
                    data['currency'] += bonus_settings["mafia"]
        del active_games[chat_id]
    else:
        game.phase = 'night'
        await message.answer("–ù–æ—á–Ω–æ–π —Ä–∞—É–Ω–¥ –Ω–∞—á–∞–ª—Å—è. –î–ª—è –Ω–æ—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /action.")

@dp.message_handler(commands=['action'])
async def cmd_action(message: types.Message):
    if message.chat.type == "private":
        user_id = message.from_user.id
        if user_id not in user_game_map:
            await message.answer("–í—ã –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –Ω–∏ –∫ –æ–¥–Ω–æ–π –∏–≥—Ä–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.")
            return

        chat_id = user_game_map[user_id]  
    else:
        chat_id = message.chat.id

    if chat_id not in active_games:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã.")
        return

    game = active_games[chat_id]
    if game.phase != 'night':
        await message.answer("–ù–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –Ω–æ—á—å—é.")
        return

    args = message.get_args().split()
    if len(args) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /action <kill/save/check/block/boost/spy> <username –∏–ª–∏ user_id>")
        return

    action_type = args[0]
    target_identifier = args[1]
    target_id = None

    for uid, data in game.players.items():
        if str(uid) == target_identifier or data['username'] == target_identifier:
            target_id = uid
            break

    if target_id is None:
        await message.answer("–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    role = game.players[user_id]['role']

    if action_type == 'kill' and role.abilities.get('kill'):
        game.night_actions[user_id] = {'action': 'kill', 'target': target_id}
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ —É–±–∏–π—Å—Ç–≤–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ.")
    elif action_type == 'save' and role.abilities.get('save'):
        game.night_actions[user_id] = {'action': 'save', 'target': target_id}
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ —Å–ø–∞—Å–µ–Ω–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ.")
    elif action_type == 'check' and role.abilities.get('check'):
        game.night_actions[user_id] = {'action': 'check', 'target': target_id}
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ.")
    elif action_type == 'block' and role.abilities.get('block'):
        game.night_actions[user_id] = {'action': 'block', 'target': target_id}
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ.")
    elif action_type == 'boost' and role.abilities.get('boost'):
        game.night_actions[user_id] = {'action': 'boost', 'target': target_id}
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ —É—Å–∏–ª–µ–Ω–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ.")
    elif action_type == 'spy' and role.abilities.get('spy'):
        game.night_actions[user_id] = {'action': 'spy', 'target': target_id}
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ —à–ø–∏–æ–Ω–∞–∂–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ.")
    else:
        await message.answer("–í–∞—à–∞ —Ä–æ–ª—å –Ω–µ –æ–±–ª–∞–¥–∞–µ—Ç —Ç–∞–∫–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å—é –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ —É–∫–∞–∑–∞–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ.")


@dp.message_handler(commands=['endnight'])
async def cmd_endnight(message: types.Message):
    if message.chat.type == "private":
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ /endnight –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö.")
        return

    chat_id = message.chat.id
    if chat_id not in active_games:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã.")
        return

    game = active_games[chat_id]
    if game.phase != 'night':
        await message.answer("–ù–æ—á–Ω–æ–π —Ä–∞—É–Ω–¥ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.")
        return

    results = game.process_night()
    text = "–ù–æ—á–Ω–∞—è —Ñ–∞–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"

    if results['killed']:
        victim_id = results['killed']
        victim = game.players[victim_id]['username']
        text += f"üî™ –ò–≥—Ä–æ–∫ {victim} –±—ã–ª —É–±–∏—Ç –Ω–æ—á—å—é.\n"

        try:
            await bot.send_message(victim_id, "üòµ –í—ã –±—ã–ª–∏ —É–±–∏—Ç—ã –Ω–æ—á—å—é! –í—ã –±–æ–ª—å—à–µ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∏–≥—Ä–µ.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–≥—Ä–æ–∫—É {victim_id}: {e}")

    else:
        text += "üåô –ù–∏–∫—Ç–æ –Ω–µ –±—ã–ª —É–±–∏—Ç –Ω–æ—á—å—é.\n"

    if results['checked']:
        for uid, role_name in results['checked'].items():
            try:
                await bot.send_message(uid, f"üîç –ö–æ–º–∏—Å—Å–∞—Ä –ø—Ä–æ–≤–µ—Ä–∏–ª –≤–∞—Å: –≤–∞—à–∞ —Ä–æ–ª—å ‚Äî {role_name}.")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {uid}: {e}")

    if results['boosted']:
        for uid in results['boosted']:
            try:
                await bot.send_message(uid, "üí™ –í—ã –±—ã–ª–∏ —É—Å–∏–ª–µ–Ω—ã –Ω–æ—á—å—é!")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {uid}: {e}")

    if results['spy_info']:
        for spy_id, act in results['spy_info'].items():
            try:
                await bot.send_message(spy_id, f"üïµÔ∏è‚Äç‚ôÇÔ∏è –í—ã —à–ø–∏–æ–Ω–∏–ª–∏ –∑–∞ –∏–≥—Ä–æ–∫–æ–º. –û–Ω —Å–æ–≤–µ—Ä—à–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ: {act}.")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {spy_id}: {e}")

    game.night_actions = {}

    winner = game.check_winner()
    if winner:
        text += f"\nüèÜ –ü–æ–±–µ–¥–∏–ª–∞ –∫–æ–º–∞–Ω–¥–∞: {winner}!\n"
        for uid, data in game.players.items():
            if data['alive']:
                if winner == '–ú–∏—Ä–Ω—ã–µ –∂–∏—Ç–µ–ª–∏' and data['role'].name not in ['–ú–∞—Ñ–∏—è', '–î–æ–Ω –º–∞—Ñ–∏–∏']:
                    data['currency'] += bonus_settings["villager"]
                elif winner == '–ú–∞—Ñ–∏—è' and data['role'].name in ['–ú–∞—Ñ–∏—è', '–î–æ–Ω –º–∞—Ñ–∏–∏']:
                    data['currency'] += bonus_settings["mafia"]

        del active_games[chat_id]  
    else:
        game.phase = 'day'  
        text += "‚òÄÔ∏è –î–Ω–µ–≤–Ω–æ–π —Ä–∞—É–Ω–¥ –Ω–∞—á–∞–ª—Å—è. –ì–æ–ª–æ—Å—É–π—Ç–µ —Å –ø–æ–º–æ—â—å—é /vote."

    await message.answer(text)


@dp.message_handler(commands=['create_role'])
async def cmd_create_role(message: types.Message):
    user_id = message.from_user.id
    if user_id not in admin_ids and user_id not in subscribers:
        await message.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return
    args = message.get_args().split()
    if len(args) < 2:
        await message.answer("–§–æ—Ä–º–∞—Ç: /create_role <–Ω–∞–∑–≤–∞–Ω–∏–µ> <—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ (kill/save/check/block/boost/spy)>")
        return
    role_name = args[0]
    abilities = {}
    for ability in args[1:]:
        if ability in ['kill', 'save', 'check', 'block', 'boost', 'spy']:
            abilities[ability] = True
    STANDARD_ROLES[role_name] = Role(role_name, '–ö–∞—Å—Ç–æ–º–Ω–∞—è —Ä–æ–ª—å', abilities)
    await message.answer(f"–ö–∞—Å—Ç–æ–º–Ω–∞—è —Ä–æ–ª—å {role_name} —Å–æ–∑–¥–∞–Ω–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏: {', '.join(abilities.keys())}")

@dp.message_handler(commands=['edit_role'])
async def cmd_edit_role(message: types.Message):
    user_id = message.from_user.id
    if user_id not in admin_ids and user_id not in subscribers:
        await message.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return
    args = message.get_args().split()
    if len(args) < 2:
        await message.answer("–§–æ—Ä–º–∞—Ç: /edit_role <–Ω–∞–∑–≤–∞–Ω–∏–µ> <—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ (kill/save/check/block/boost/spy)>")
        return
    role_name = args[0]
    if role_name not in STANDARD_ROLES:
        await message.answer("–†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    if role_name in ['–ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å', '–ú–∞—Ñ–∏—è', '–î–æ–Ω –º–∞—Ñ–∏–∏', '–î–æ–∫—Ç–æ—Ä', '–ö–æ–º–∏—Å—Å–∞—Ä']:
        await message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ä–æ–ª–µ–π –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ.")
        return
    abilities = {}
    for ability in args[1:]:
        if ability in ['kill', 'save', 'check', 'block', 'boost', 'spy']:
            abilities[ability] = True
    STANDARD_ROLES[role_name].abilities = abilities
    await message.answer(f"–ö–∞—Å—Ç–æ–º–Ω–∞—è —Ä–æ–ª—å {role_name} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏: {', '.join(abilities.keys()) if abilities else '–Ω–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π'}")

@dp.message_handler(commands=['subscribe'])
async def cmd_subscribe(message: types.Message):
    user_id = message.from_user.id
    profile = get_user_profile(user_id, message.from_user.username or message.from_user.first_name)
    if user_id in subscribers:
        await message.answer("‚ÑπÔ∏è –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –ø—Ä–µ–º–∏—É–º-—Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    if profile["donation"] < SUBSCRIPTION_PRICE:
        await message.answer(
            f"üí∞ –î–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–Ω–∞—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å –Ω–µ –º–µ–Ω–µ–µ {SUBSCRIPTION_PRICE}. "
            f"–í–∞—à –¥–æ–Ω–∞—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å: {profile['donation']}."
        )
        return
    profile["donation"] -= SUBSCRIPTION_PRICE
    subscribers.add(user_id)
    save_data()
    await message.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –ø—Ä–µ–º–∏—É–º-—Ñ—É–Ω–∫—Ü–∏–∏!")


@dp.message_handler(commands=['shop'])
async def cmd_shop(message: types.Message):
    text = "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:\n"
    for item, price in SHOP_ITEMS.items():
        text += f"{item} ‚Äì {price} –≤–∞–ª—é—Ç—ã\n"
    await message.answer(text)

@dp.message_handler(commands=['buy'])
async def cmd_buy(message: types.Message):
    args = message.get_args().split(maxsplit=1)
    if not args:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /buy <–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞>")
        return
    item_name = args[0]
    if item_name not in SHOP_ITEMS:
        await message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    price = SHOP_ITEMS[item_name]
    user_id = message.from_user.id
    profile = get_user_profile(user_id, message.from_user.username or message.from_user.first_name)
    if profile["balance"] < price:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏.")
        return
    profile["balance"] -= price
    save_data()
    await message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ {item_name} –∑–∞ {price} –≤–∞–ª—é—Ç—ã!")

@dp.message_handler(commands=['stop'])
async def cmd_stop(message: types.Message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    if user_id not in admin_ids:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    if chat_id in active_games:
        del active_games[chat_id]
        await message.answer("–ò–≥—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    else:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")

@dp.message_handler(commands=['end'])
async def cmd_end(message: types.Message):
    await cmd_stop(message)

@dp.message_handler(commands=['leave'])
async def cmd_leave(message: types.Message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    if chat_id in active_games:
        game = active_games[chat_id]
        if user_id in game.players:
            del game.players[user_id]
            await message.answer("–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –∏–≥—Ä—É.")
        else:
            await message.answer("–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∏–≥—Ä–µ.")
    else:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã.")

@dp.message_handler(commands=['set_bonus'])
async def cmd_set_bonus(message: types.Message):
    user_id = message.from_user.id
    if user_id not in admin_ids:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    args = message.get_args().split()
    if len(args) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set_bonus <villager/mafia> <—Å—É–º–º–∞>")
        return
    group = args[0].lower()
    if group not in ['villager', 'mafia']:
        await message.answer("–ì—Ä—É–ø–ø–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 'villager' –∏–ª–∏ 'mafia'.")
        return
    try:
        amount = int(args[1])
    except ValueError:
        await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    bonus_settings[group] = amount
    await message.answer(f"–ë–æ–Ω—É—Å –¥–ª—è {group} –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ {amount} –≤–∞–ª—é—Ç—ã.")

@dp.message_handler(commands=['subscribers'])
async def cmd_subscribers(message: types.Message):
    user_id = message.from_user.id
    if user_id not in admin_ids:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    if not subscribers:
        await message.answer("–ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.")
        return
    subs = ", ".join(str(uid) for uid in subscribers)
    await message.answer("–°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: " + subs)

@dp.message_handler(commands=['profile'])
async def cmd_profile(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    profile = get_user_profile(user_id, username)
    text = (f"–ü—Ä–æ—Ñ–∏–ª—å {profile['username']}:\n"
            f"–ë–∞–ª–∞–Ω—Å: {profile['balance']}\n"
            f"–û—á–∫–∏: {profile['points']}\n"
            f"–†–æ–∑—ã: {profile['roses']}")
    await message.answer(text)

@dp.message_handler(commands=['game'])
async def cmd_game(message: types.Message):
    if message.chat.type == "private":
        user_id = message.from_user.id
        if user_id not in user_game_map:
            await message.answer("–í—ã –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –Ω–∏ –∫ –æ–¥–Ω–æ–π –∏–≥—Ä–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.")
            return

        chat_id = user_game_map[user_id]  
    else:
        chat_id = message.chat.id

    if chat_id not in active_games:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã.")
        return

    game = active_games[chat_id]
    players = ", ".join([data['username'] for data in game.players.values()])
    await message.answer(f"–ê–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞ –≤ —á–∞—Ç–µ {chat_id}:\n–§–∞–∑–∞: {game.phase}\n–ò–≥—Ä–æ–∫–∏: {players}")


@dp.message_handler(commands=['time'])
async def cmd_time(message: types.Message):
    chat_id = message.chat.id
    if chat_id in active_games:
        game = active_games[chat_id]
        await message.answer(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∏–≥—Ä—ã: –§–∞–∑–∞ ‚Äì {game.phase}")
    else:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã.")

@dp.message_handler(commands=['extend'])
async def cmd_extend(message: types.Message):
    chat_id = message.chat.id
    if chat_id in active_games:
        await message.answer("–í—Ä–µ–º—è —Ä–∞—É–Ω–¥–∞ –ø—Ä–æ–¥–ª–µ–Ω–æ.")
    else:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã.")

@dp.message_handler(commands=['next'])
async def cmd_next(message: types.Message):
    chat_id = message.chat.id
    if chat_id in active_games:
        game = active_games[chat_id]
        if game.phase == 'day':
            game.phase = 'night'
            await message.answer("–ü–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–æ—á–Ω–æ–º—É —Ä–∞—É–Ω–¥—É.")
        elif game.phase == 'night':
            game.phase = 'day'
            await message.answer("–ü–µ—Ä–µ—Ö–æ–¥ –∫ –¥–Ω–µ–≤–Ω–æ–º—É —Ä–∞—É–Ω–¥—É.")
        else:
            await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ–∞–∑–∞.")
    else:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã.")

@dp.message_handler(commands=['help'])
async def cmd_help(message: types.Message):
    help_keyboard = InlineKeyboardMarkup(row_width=2)
    help_keyboard.add(
        InlineKeyboardButton("–ö–æ–º–∞–Ω–¥—ã –∏–≥—Ä—ã", callback_data="help_game"),
        InlineKeyboardButton("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞", callback_data="help_bot")
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–æ–º–∞–Ω–¥:", reply_markup=help_keyboard)

@dp.callback_query_handler(lambda c: c.data in ["help_game", "help_bot"])
async def process_help_callback(callback_query: types.CallbackQuery):
    data = callback_query.data
    if data == "help_game":
        text = (
            "<b>–ö–æ–º–∞–Ω–¥—ã –∏–≥—Ä—ã:</b>\n"
            "/newgame - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ.\n"
            "/join - –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä–µ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ.\n"
            "/startgame - –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É (–º–∏–Ω–∏–º—É–º 5 –∏–≥—Ä–æ–∫–æ–≤).\n"
            "/vote - –û—Ç–¥–∞—Ç—å –≥–æ–ª–æ—Å –∑–∞ –∏–≥—Ä–æ–∫–∞ –≤–æ –≤—Ä–µ–º—è –¥–Ω–µ–≤–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞.\n"
            "/endvote - –ó–∞–≤–µ—Ä—à–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∏ –∏–∑–≥–Ω–∞—Ç—å –∏–≥—Ä–æ–∫–∞.\n"
            "/action - –í—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–æ—á–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —É–±–∏–π—Å—Ç–≤–æ –∏–ª–∏ —Å–ø–∞—Å–µ–Ω–∏–µ).\n"
            "/endnight - –ó–∞–≤–µ—Ä—à–∏—Ç—å –Ω–æ—á–Ω–æ–π —Ä–∞—É–Ω–¥ –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä–æ–∫–æ–≤.\n"
            "/game - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä–µ.\n"
            "/time - –£–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â—É—é —Ñ–∞–∑—É –∏–≥—Ä—ã.\n"
            "/extend - –ü—Ä–æ–¥–ª–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞—É–Ω–¥–∞.\n"
            "/next - –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞—É–Ω–¥—É.\n"
            "/case - –û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å –∏ –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ."
        )
    else:
        text = (
            "<b>–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:</b>\n"
            "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∏–≥—Ä–µ —á–µ—Ä–µ–∑ —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.\n"
            "/profile - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å (–±–∞–ª–∞–Ω—Å, –æ—á–∫–∏, —Ä–æ–∑—ã).\n"
            "/add_chat_to_list - –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç –≤ —Å–ø–∏—Å–æ–∫\n"
            "/balance (/amount) - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
            "/give - –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤–∞–ª—é—Ç—É –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É.\n"
            "/shop - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã –º–∞–≥–∞–∑–∏–Ω–∞.\n"
            "/buy - –ö—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞.\n"
            "/subscribe - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–µ–º–∏—É–º-—Ñ—É–Ω–∫—Ü–∏–∏.\n"
            "/top - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ—á–∫–∞–º.\n"
            "/points - –£–∑–Ω–∞—Ç—å —Å–≤–æ–∏ –æ—á–∫–∏.\n"
            "/top_chats - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–ø —á–∞—Ç–æ–≤ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.\n"
            "/top_global - –£–∑–Ω–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n"
            "/points_global - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ—á–∫–∏.\n"
            "/rose - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–æ–∑—ã –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n"
            "/voice_rose - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Ä–æ–∑—ã.\n"
            "/chats - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤.\n"
            "/roses_amount - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–∑.\n"
            "/feedback - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É."
        )
    back_keyboard = InlineKeyboardMarkup().add(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="help_back"))
    await callback_query.message.edit_text(text, reply_markup=back_keyboard, parse_mode="HTML")
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == "help_back")
async def process_help_back(callback_query: types.CallbackQuery):
    help_keyboard = InlineKeyboardMarkup(row_width=2)
    help_keyboard.add(
        InlineKeyboardButton("–ö–æ–º–∞–Ω–¥—ã –∏–≥—Ä—ã", callback_data="help_game"),
        InlineKeyboardButton("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞", callback_data="help_bot")
    )
    await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–æ–º–∞–Ω–¥:", reply_markup=help_keyboard)
    await callback_query.answer()

@dp.message_handler(commands=['settings'])
async def cmd_settings(message: types.Message):
    await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã.")

@dp.message_handler(commands=['balance'])
async def cmd_balance(message: types.Message):
    user_id = message.from_user.id
    profile = get_user_profile(user_id, message.from_user.username or message.from_user.first_name)
    await message.answer(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {profile['balance']}")

@dp.message_handler(commands=['give'])
async def cmd_give(message: types.Message):
    args = message.get_args().split()
    if len(args) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /give <user_id –∏–ª–∏ username> <—Å—É–º–º–∞>")
        return
    try:
        amount = int(args[1])
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞.")
        return
    sender_id = message.from_user.id
    sender_profile = get_user_profile(sender_id, message.from_user.username or message.from_user.first_name)
    if sender_profile["balance"] < amount:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
        return
    target_identifier = args[0]
    target_profile = None
    for uid, profile in user_profiles.items():
        if str(uid) == target_identifier or profile["username"] == target_identifier:
            target_profile = profile
            break
    if not target_profile:
        await message.answer("–¶–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    sender_profile["balance"] -= amount
    target_profile["balance"] += amount
    save_data()
    await message.answer(f"–í—ã –ø–µ—Ä–µ–≤–µ–ª–∏ {amount} –≤–∞–ª—é—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_profile['username']}.")

@dp.message_handler(commands=['prolong'])
async def cmd_prolong(message: types.Message):
    await cmd_extend(message)

@dp.message_handler(commands=['reload_admins'])
async def cmd_reload_admins(message: types.Message):
    global admin_ids
    user_id = message.from_user.id
    if user_id not in admin_ids:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    admin_ids = {1097277508}
    await message.answer("–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω.")

@dp.message_handler(commands=['feedback'])
async def cmd_feedback(message: types.Message):
    feedback_text = message.get_args()
    if not feedback_text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
        return
    admin_id = next(iter(admin_ids))
    await bot.send_message(admin_id, f"–û—Ç–∑—ã–≤ –æ—Ç {message.from_user.username or message.from_user.first_name}:\n{feedback_text}")
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!")

@dp.message_handler(commands=["id"])
async def send_chat_id(message: types.Message):
    chat_id = message.chat.id
    await message.reply(f"ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: `{chat_id}`", parse_mode="Markdown")

@dp.message_handler(commands=['top'])
async def cmd_top(message: types.Message):
    if not user_profiles:
        await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞.")
        return
    sorted_users = sorted(user_profiles.items(), key=lambda item: item[1]["points"], reverse=True)
    text = "–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ—á–∫–∞–º:\n"
    for i, (uid, profile) in enumerate(sorted_users[:10], 1):
        text += f"{i}. {profile['username']} - {profile['points']} –æ—á–∫–æ–≤\n"
    await message.answer(text)

@dp.message_handler(commands=['points'])
async def cmd_points(message: types.Message):
    user_id = message.from_user.id
    profile = get_user_profile(user_id, message.from_user.username or message.from_user.first_name)
    await message.answer(f"–í–∞—à–∏ –æ—á–∫–∏: {profile['points']}")

@dp.message_handler(commands=['exit'])
async def cmd_exit(message: types.Message):
    await cmd_leave(message)

@dp.message_handler(commands=['top_chats'])
async def cmd_top_chats(message: types.Message):
    if not chat_list:
        await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —á–∞—Ç–∞–º.")
        return
    sorted_chats = sorted(chat_list.items(), key=lambda item: item[1].get("score", 0), reverse=True)
    text = "–¢–æ–ø —á–∞—Ç–æ–≤:\n"
    for i, (chat_id, chat_info) in enumerate(sorted_chats[:10], 1):
        text += f"{i}. {chat_info.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} - {chat_info.get('score', 0)}\n"
    await message.answer(text)

@dp.message_handler(commands=['top_global'])
async def cmd_top_global(message: types.Message):
    if not user_profiles:
        await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞.")
        return
    sorted_users = sorted(user_profiles.items(), key=lambda item: item[1]["points"], reverse=True)
    text = "–ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ—á–∫–∞–º:\n"
    for i, (uid, profile) in enumerate(sorted_users[:10], 1):
        text += f"{i}. {profile['username']} - {profile['points']} –æ—á–∫–æ–≤\n"
    await message.answer(text)

@dp.message_handler(commands=['points_global'])
async def cmd_points_global(message: types.Message):
    user_id = message.from_user.id
    profile = get_user_profile(user_id, message.from_user.username or message.from_user.first_name)
    await message.answer(f"–í–∞—à–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ—á–∫–∏: {profile['points']}")

@dp.message_handler(commands=['rose'])
async def cmd_rose(message: types.Message):
    args = message.get_args().split()
    if len(args) < 1:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /rose <user_id –∏–ª–∏ username> [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]")
        return
    try:
        amount = int(args[1]) if len(args) > 1 else 1
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.")
        return
    sender_id = message.from_user.id
    _ = get_user_profile(sender_id, message.from_user.username or message.from_user.first_name)
    target_identifier = args[0]
    target_profile = None
    for uid, profile in user_profiles.items():
        if str(uid) == target_identifier or profile["username"] == target_identifier:
            target_profile = profile
            break
    if not target_profile:
        await message.answer("–¶–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    target_profile["roses"] += amount
    await message.answer(f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ {amount} —Ä–æ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_profile['username']}.")

@dp.message_handler(commands=['voice_rose'])
async def cmd_voice_rose(message: types.Message):
    args = message.get_args().split()
    if len(args) < 1:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /voice_rose <user_id –∏–ª–∏ username> [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]")
        return
    try:
        amount = int(args[1]) if len(args) > 1 else 1
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.")
        return
    sender_id = message.from_user.id
    _ = get_user_profile(sender_id, message.from_user.username or message.from_user.first_name)
    target_identifier = args[0]
    target_profile = None
    for uid, profile in user_profiles.items():
        if str(uid) == target_identifier or profile["username"] == target_identifier:
            target_profile = profile
            break
    if not target_profile:
        await message.answer("–¶–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    target_profile["roses"] += amount
    target_profile["points"] += amount
    await message.answer(f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ {amount} –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Ä–æ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_profile['username']}.")

@dp.message_handler(commands=['chats'])
async def cmd_chats(message: types.Message):
    if not chat_list:
        await message.answer("–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –ø—É—Å—Ç.")
        return
    text = "–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤:\n"
    for chat_id, info in chat_list.items():
        text += f"Chat ID: {chat_id}, Title: {info.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
    await message.answer(text)

@dp.message_handler(commands=['amount'])
async def cmd_amount(message: types.Message):
    user_id = message.from_user.id
    profile = get_user_profile(user_id, message.from_user.username or message.from_user.first_name)
    await message.answer(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {profile['balance']}")

@dp.message_handler(commands=['roses_amount'])
async def cmd_roses_amount(message: types.Message):
    user_id = message.from_user.id
    profile = get_user_profile(user_id, message.from_user.username or message.from_user.first_name)
    await message.answer(f"–£ –≤–∞—Å {profile['roses']} —Ä–æ–∑.")

@dp.message_handler(commands=['add_chat_to_list'])
async def cmd_add_chat_to_list(message: types.Message):
    user_id = message.from_user.id
    args = message.get_args().split(maxsplit=1)
    if len(args) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_chat_to_list <chat_id> <title>")
        return
    try:
        chat_id = int(args[0])
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π chat_id.")
        return
    title = args[1]
    chat_list[chat_id] = {"title": title, "link": None, "status": "–Ω–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω", "score": 0}
    save_data()
    await message.answer(f"–ß–∞—Ç {title} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫.")

@dp.message_handler(commands=['remove_chat_from_list'])
async def cmd_remove_chat_from_list(message: types.Message):
    user_id = message.from_user.id
    if user_id not in admin_ids:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    args = message.get_args().split()
    if not args:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /remove_chat_from_list <chat_id>")
        return
    try:
        chat_id = int(args[0])
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π chat_id.")
        return
    if chat_id in chat_list:
        del chat_list[chat_id]
        save_data()
        await message.answer("–ß–∞—Ç —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞.")
    else:
        await message.answer("–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@dp.message_handler(commands=['update_chat_link'])
async def cmd_update_chat_link(message: types.Message):
    user_id = message.from_user.id
    if user_id not in admin_ids:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    args = message.get_args().split(maxsplit=1)
    if len(args) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /update_chat_link <chat_id> <new_link>")
        return
    try:
        chat_id = int(args[0])
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π chat_id.")
        return
    new_link = args[1]
    if chat_id in chat_list:
        chat_list[chat_id]["link"] = new_link
        chat_list[chat_id]["status"] = "–æ–±–Ω–æ–≤–ª–µ–Ω–æ"
        save_data()
        await message.answer("–°—Å—ã–ª–∫–∞ —á–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    else:
        await message.answer("–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@dp.message_handler(commands=['chat_link_status'])
async def cmd_chat_link_status(message: types.Message):
    args = message.get_args().split()
    if not args:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /chat_link_status <chat_id>")
        return
    try:
        chat_id = int(args[0])
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π chat_id.")
        return
    if chat_id in chat_list:
        status = chat_list[chat_id].get("status", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        await message.answer(f"–°—Ç–∞—Ç—É—Å —Å—Å—ã–ª–∫–∏ —á–∞—Ç–∞: {status}")
    else:
        await message.answer("–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@dp.message_handler(commands=['case'])
async def cmd_case(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    profile = get_user_profile(user_id, username)
    reward_type = random.choice(["balance", "points", "roses"])
    reward_amount = random.randint(1, 100)
    if reward_type == "balance":
        profile["balance"] += reward_amount
        save_data()
        await message.answer(f"–í—ã –æ—Ç–∫—Ä—ã–ª–∏ –∫–µ–π—Å –∏ –ø–æ–ª—É—á–∏–ª–∏ {reward_amount} –≤–∞–ª—é—Ç—ã!")
    elif reward_type == "points":
        profile["points"] += reward_amount
        save_data()
        await message.answer(f"–í—ã –æ—Ç–∫—Ä—ã–ª–∏ –∫–µ–π—Å –∏ –ø–æ–ª—É—á–∏–ª–∏ {reward_amount} –æ—á–∫–æ–≤!")
    elif reward_type == "roses":
        profile["roses"] += reward_amount
        save_data()
        await message.answer(f"–í—ã –æ—Ç–∫—Ä—ã–ª–∏ –∫–µ–π—Å –∏ –ø–æ–ª—É—á–∏–ª–∏ {reward_amount} —Ä–æ–∑!")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
